Resources:
  TradingScreenerTopic:
    Type: AWS::SNS::Topic
  TradingOracularTopic:
    Type: AWS::SNS::Topic
  TradingScreenerTopicSub:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: <String>
      TopicArn: <String>
  TradingScreenerSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: cron(31 9-15 * * 1-5)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt TradingScreenerFunction.Arn
        RoleArn: !GetAtt TradingScreenerScheduleToTradingScreenerFunctionRole.Arn
  TradingTraderSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: rate(15 minutes)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt TradingTraderFuntion.Arn
        RoleArn: !GetAtt TradingTraderScheduleToTradingTraderFuntionRole.Arn
  TradingTraderTopic:
    Type: AWS::SNS::Topic
  TradingTraderTopicSub:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: <String>
      TopicArn: <String>
  TradingOracularTopicSub:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: <String>
      TopicArn: <String>
  TradingScreenerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TradingScreenerFunction
      CodeUri: src/Function
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 540
      Tracing: Active
  TradingScreenerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${TradingScreenerFunction}
  TradingOracularFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TradingOracularFunction
      CodeUri: src/Function2
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 540
      Tracing: Active
  TradingOracularFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${TradingOracularFunction}
  TradingTraderFuntion:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TradingTraderFuntion
      CodeUri: src/Function3
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 256
      Timeout: 540
      Tracing: Active
  TradingTraderFuntionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${TradingTraderFuntion}
  TradingScreenerScheduleToTradingScreenerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn: !Sub
                - arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*/${AWS::StackName}-${ResourceId}-*
                - ResourceId: TradingScreenerSchedule
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt TradingScreenerFunction.Arn
  TradingTraderScheduleToTradingTraderFuntionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn: !Sub
                - arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*/${AWS::StackName}-${ResourceId}-*
                - ResourceId: TradingTraderSchedule
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt TradingTraderFuntion.Arn
  TradingOracularSchedule1:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: cron(05 08 * * 1 -5)
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt TradingOracularFunction.Arn
        RoleArn: !GetAtt TradingOracularSchedule1ToTradingOracularFunctionRole.Arn
  TradingOracularSchedule1ToTradingOracularFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub scheduler.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn: !Sub
                - arn:${AWS::Partition}:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/*/${AWS::StackName}-${ResourceId}-*
                - ResourceId: TradingOracularSchedule1
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt TradingOracularFunction.Arn
  TradingOracularSchedule2:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: cron(20 08 * * 1 -5)
      FlexibleTimeWindow:
        Mode: 'OFF'
  TradingOracularSchedule3:
    Type: AWS::Scheduler::Schedule
    Properties:
      ScheduleExpression: cron(31 08 * * 1 -5)
      FlexibleTimeWindow:
        Mode: 'OFF'
Transform: AWS::Serverless-2016-10-31